{
  "name": "Fl-google-maps-driver",
  "tagline": "Dead simple driver for google maps. Making creating maps, markers, infoWindows and marker animations simpler.",
  "body": "# Dead simple Google maps driver\r\n\r\n[Checkout the example](https://rawgit.com/lazamar/fl-google-maps-driver/8a066dd30ac4bb9404e25fd0aee8aee989a9ab0d/examples/index.html)\r\n## How to use:\r\nGive a look at the examples folder.\r\n``` javascript\r\n  const mapDriver = new MapDriver(google, '#map', { center: { lat: 51.473663, lng: -0.203287 }});\r\n\r\n  // Crate markers with latitude and longitude\r\n  const marker = mapDriver.createMarker({\r\n     lat: 51.473663,\r\n     lng: -0.203287 ,\r\n     icon: 'http://example.com/icon.jpg'\r\n  });\r\n\r\n  // Move marker\r\n  mapDriver.moveMarker(marker, { lat: 51.579663, lng: -0.613287 });\r\n\r\n  // Set anination duration\r\n  mapDriver.moveMarker(marker, { lat: 51.579663, lng: -0.613287 }, 2500);\r\n\r\n  // get locations for addresses\r\n  mapDriver.toLatLng('21 Heathmans Road, London, Uk')\r\n  .then(coord => {\r\n    const marker2 = mapDriver.createMarker({\r\n      lat: coords.lat,\r\n      lng: coords.lng,\r\n    });\r\n  });\r\n\r\n  // Get existing markers\r\n  const allMarkers = mapDriver.getMarkers();\r\n\r\n  // Focus markers\r\n  mapDriver.focusMarkers(allMarkers);\r\n\r\n  // Destroy markers\r\n  mapDriver.destroyMarker(marker);\r\n```\r\n\r\n## API\r\n``` javascript\r\n  /**\r\n   * Adds a marker to this.markers list\r\n   * @private\r\n   * @method addMarker\r\n   * @param {Marker}\r\n   */\r\n  addMarker(marker)\r\n\r\n  /**\r\n   * Returns all markers currently in the map\r\n   * @public\r\n   * @return {Array<Marker>}\r\n   */\r\n  getMarkers()\r\n\r\n  /**\r\n   * Creates a map marker\r\n   * @public\r\n   * @param {Object} config - Must have 'lat' and lng'\r\n   * @return {Marker}\r\n   */\r\n  createMarker(config)\r\n\r\n  /**\r\n   * Animates a marker to a specific coordinate\r\n   * @public\r\n   * @param {Marker} marker\r\n   * @param {Object} destination - 'lat' and 'lng'\r\n   * @param {Int} duration - In milliseconds\r\n   */\r\n  moveMarker(marker, destination, duration = 1000)\r\n\r\n  /**\r\n   * Removes a marker from the map.\r\n   * @public\r\n   * @param {Marker} marker\r\n   */\r\n  destroyMarker(marker)\r\n\r\n  /**\r\n   * Fits map's focus on specified markers\r\n   * @public\r\n   * @param {Array<Marker}\r\n   */\r\n  focusMarkers(markers)\r\n\r\n  /**\r\n   * Converts an array into an object with 'lat' and 'lng'\r\n   * @public\r\n   * @param {String} address\r\n   * @return {Promise<Object>}\r\n   */\r\n  async toLatLng(address)\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}